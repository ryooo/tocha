import 'dart:io';
import 'dart:typed_data';

import 'package:chat_bubbles/bubbles/bubble_normal_image.dart';
import 'package:chat_bubbles/bubbles/bubble_special_three.dart';
import 'package:chatapp/constants/constants.dart';
import 'package:chatapp/models/chat_model.dart';
import 'package:chatapp/providers/setting_model_provider.dart';
import 'package:chatapp/providers/text_to_speach_provider.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:provider/provider.dart';
import 'package:screenshot/screenshot.dart';
import 'package:share_plus/share_plus.dart';

class ChatWidget extends StatefulWidget {
  final ChatModel model;
  const ChatWidget({required this.model, Key? key}) : super(key: key);

  @override
  State<ChatWidget> createState() => _ChatWidgetState();
}

class _ChatWidgetState extends State<ChatWidget> {
  ScreenshotController screenshotController = ScreenshotController();
  var _shareImageWidth = 1.0;

  @override
  void initState() {
    _shareImageWidth = 1.0;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    switch (widget.model.messageType) {
      case ChatMessageType.user:
        return _buildUserMessage();
      case ChatMessageType.bot:
        return _buildBotMessage(context);
      case ChatMessageType.botImage:
        return _buildBotImageMessage();
    }
  }

  Widget _buildUserMessage() {
    return BubbleSpecialThree(
      text: widget.model.message,
      color: const Color(0xFF1B97F3),
      tail: true,
      textStyle: const TextStyle(color: Colors.white, fontSize: 16),
    );
  }

  Widget _buildBotMessage(BuildContext context) {
    switch (widget.model.message) {
      case "":
        return Container(
          alignment: Alignment.topLeft,
          padding: const EdgeInsets.only(left: 30, top: 10),
          child: randomLoading(Colors.black, 30),
        );
      default:
        return Stack(
          children: [
            BubbleSpecialThree(
              text: widget.model.message,
              color: const Color(0xFFE8E8EE),
              tail: true,
              isSender: false,
            ),
            Positioned(
              top: 0,
              left: MediaQuery.of(context).size.width * .7 + 20,
              child: createVoiceButton(context),
            ),
          ],
        );
    }
  }

  Widget _buildBotImageMessage() {
    if (widget.model.message.isEmpty) {
      return Column(
        children: [
          BubbleNormalImage(
            id: widget.model.id,
            image: widget.model.message.isEmpty
                ? Image.asset('assets/images/giphy.gif')
                : Image.network(
                    widget.model.message,
                  ),
            color: Colors.black12,
            tail: true,
            delivered: true,
          ),
          const Text(
            'おまちください...',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.w400),
          )
        ],
      );
    }
    return Column(
      children: [
        BubbleNormalImage(
          id: widget.model.id,
          image: Image.network(
            widget.model.message,
          ),
          color: Colors.black12,
          tail: true,
          delivered: true,
        ),
        ElevatedButton.icon(
          icon: const Icon(Icons.share),
          style: ElevatedButton.styleFrom(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          ),
          onPressed: () async {
            setState(() {
              _shareImageWidth = MediaQuery.of(context).size.width;
            });
            await shareImage();
            setState(() {
              _shareImageWidth = 1.0;
            });
          },
          label: const Text(
            'シェア',
            style: TextStyle(fontSize: 18),
          ),
        ),
        Screenshot(
          controller: screenshotController,
          child: Image.network(
            widget.model.message,
            width: _shareImageWidth,
            fit: BoxFit.fill,
          ),
        )
      ],
    );
  }

  shareImage() async {
    await screenshotController
        .capture(delay: const Duration(milliseconds: 100), pixelRatio: 1.0)
        .then((Uint8List? img) async {
      if (img != null) {
        final directory = (await getApplicationDocumentsDirectory()).path;
        final fileName = "${widget.model.id}.png";
        final imgPath = await File("$directory/$fileName").create();
        await imgPath.writeAsBytes(img);

        final files = <XFile>[];
        var xfile = XFile(imgPath.path);
        files.add(xfile);
        Share.shareXFiles(files, text: "Generated by DALL-E");
      } else {
        debugPrint('Failed to take screenshot');
      }
    });
  }

  Widget createVoiceButton(BuildContext context) {
    final textToSpeachProvider = Provider.of<TextToSpeachProvider>(context);
    final settingModelProvider = Provider.of<SettingModelProvider>(context);
    var isSpeaking = textToSpeachProvider.chatModel == widget.model;
    return GestureDetector(
      child: Icon(
        isSpeaking ? Icons.stop_circle : Icons.play_circle,
        color: kVoiceColor,
        size: 35,
      ),
      onTap: () {
        if (isSpeaking) {
          textToSpeachProvider.stop();
        } else {
          // 再生ボタンを押下された場合は設定がオフでも読み上げる
          textToSpeachProvider.speakChatModel(
              widget.model, settingModelProvider.model.textToSpeachSetting);
        }
      },
    );
  }
}
